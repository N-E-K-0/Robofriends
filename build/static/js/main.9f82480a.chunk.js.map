{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","robot.js","Searchbox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robot","map","user","i","key","username","Searchbox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobot","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCFSC,EAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACtB,OAEC,yBAAKC,UAAU,kDACd,yBAAKC,IAAG,+BAA0BJ,EAA1B,cAA0CK,IAAK,UACvD,6BACC,4BAAKJ,GACL,2BAAIC,MCeOI,EArBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEjB,OACC,6BAEEA,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLV,GAAIO,EAAMG,GAAGV,GACbC,KAAMM,EAAMG,GAAGT,KACfC,MAAOK,EAAMG,GAAGR,aCdVK,EAAQ,CAEpB,CACCP,GAAG,EACHC,KAAK,SACLW,SAAS,QACTV,MAAM,qBAEP,CACCF,GAAG,EACHC,KAAK,UACLW,SAAS,SACTV,MAAM,sBAEP,CACCF,GAAG,EACHC,KAAK,UACLW,SAAS,SACTV,MAAM,sBAEP,CACCF,GAAG,EACHC,KAAK,UACLW,SAAS,QACTV,MAAM,sBAEP,CACCF,GAAG,EACHC,KAAK,UACLW,SAAS,SACTV,MAAM,sBAEP,CACCF,GAAG,EACHC,KAAK,UACLW,SAAS,SACTV,MAAM,sBAEP,CACCF,GAAG,EACHC,KAAK,UACLW,SAAS,SACTV,MAAM,sBAEP,CACCF,GAAG,EACHC,KAAK,UACLW,SAAS,SACTV,MAAM,uBC/BOW,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAEhC,OAEC,yBAAKZ,UAAY,OAChB,2BACCA,UAAY,uCACZa,KAAM,SACNC,YAAa,gBACbC,SAAYH,MCyBDI,G,kBA7Bd,aAAe,IAAD,8BACb,+CAODC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACZlB,MAAMA,EACNO,YAAY,IAJA,E,sEAaL,IAAD,OACDY,EAAcC,KAAKF,MAAMlB,MAAMqB,QAAO,SAAArB,GAC3C,OAAOA,EAAMN,KAAK4B,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAGjE,OAEC,yBAAK1B,UAAY,OAChB,wBAAIA,UAAY,MAAhB,kBACA,kBAAC,EAAD,CAAYY,aAAcY,KAAKP,iBAC/B,kBAAC,EAAD,CAAUb,MAAQmB,S,GAxBJK,c,MCElBC,IAASC,OAER,kBAAC,EAAD,MAEEC,SAASC,eAAe,SNuHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9f82480a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n\treturn (\r\n\r\n\t\t<div className=' tc bg-white dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${id}?bgset=bg2`} alt ='robot' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({robot}) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobot.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robot[i].id} \r\n\t\t\t\t\t\t\tname={robot[i].name} \r\n\t\t\t\t\t\t\temail={robot[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t); \r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\r\n\t\t)\r\n\t}\r\n\r\nexport default CardList;","export const robot = [\r\n\t\r\n\t{\r\n\t\tid:1,\r\n\t\tname:'pinpin',\r\n\t\tusername:'vejal',\r\n\t\temail:'janowar@jalim.net'\r\n\t},\r\n\t{\r\n\t\tid:2,\r\n\t\tname:'pinpin1',\r\n\t\tusername:'vejal1',\r\n\t\temail:'janowar1@jalim.net'\r\n\t},\r\n\t{\r\n\t\tid:3,\r\n\t\tname:'pinpin2',\r\n\t\tusername:'vejal2',\r\n\t\temail:'janowar2@jalim.net'\r\n\t},\r\n\t{\r\n\t\tid:4,\r\n\t\tname:'pinpin3',\r\n\t\tusername:'veja3',\r\n\t\temail:'janowar3@jalim.net'\r\n\t},\r\n\t{\r\n\t\tid:5,\r\n\t\tname:'pinpin4',\r\n\t\tusername:'vejal4',\r\n\t\temail:'janowar4@jalim.net'\r\n\t},\r\n\t{\r\n\t\tid:6,\r\n\t\tname:'pinpin5',\r\n\t\tusername:'vejal5',\r\n\t\temail:'janowar5@jalim.net'\r\n\t},\r\n\t{\r\n\t\tid:7,\r\n\t\tname:'pinpin6',\r\n\t\tusername:'vejal6',\r\n\t\temail:'janowar6@jalim.net'\r\n\t},\r\n\t{\r\n\t\tid:1,\r\n\t\tname:'pinpin7',\r\n\t\tusername:'vejal7',\r\n\t\temail:'janowar7@jalim.net'\r\n\t}\r\n\r\n]","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'pa3 ba b--white-70 bg-lightest-blue '\r\n\t\t\t\ttype ='search' \r\n\t\t\t\tplaceholder ='search robots' \r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\nexport default Searchbox;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport {robot} from './robot';\r\nimport Searchbox from './Searchbox';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobot:robot,\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t// console.log(event.target.value);\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filteredRobot=this.state.robot.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn( \r\n\r\n\t\t\t<div className = 'tc '>\r\n\t\t\t\t<h1 className = 'f1'> Robo Friends </h1>\r\n\t\t\t\t<Searchbox  searchChange={this.onSearchChange}/>\r\n\t\t\t\t<CardList robot ={filteredRobot} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\nimport './index.css';\n\n\nReactDOM.render(\n\n\t<App />\n\n\t, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}