{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","robot.js","Searchbox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robot","map","user","i","key","username","Searchbox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobot","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACtB,OAEC,yBAAKC,UAAU,kDACd,yBAAKC,IAAG,+BAA0BJ,EAA1B,cAA0CK,IAAK,UACvD,6BACC,4BAAKJ,GACL,2BAAIC,MCeOI,EArBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEjB,OACC,6BAEEA,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLV,GAAIO,EAAMG,GAAGV,GACbC,KAAMM,EAAMG,GAAGT,KACfC,MAAOK,EAAMG,GAAGR,aCdVK,EAAQ,CAEpB,CACCP,GAAG,EACHC,KAAK,SACLW,SAAS,MACTV,MAAM,oBAEP,CACCF,GAAG,EACHC,KAAK,cACLW,SAAS,OACTV,MAAM,mBAEP,CACCF,GAAG,EACHC,KAAK,cACLW,SAAS,MACTV,MAAM,kBAEP,CACCF,GAAG,EACHC,KAAK,aACLW,SAAS,MACTV,MAAM,kBAEP,CACCF,GAAG,EACHC,KAAK,eACLW,SAAS,QACTV,MAAM,oBAEP,CACCF,GAAG,EACHC,KAAK,gBACLW,SAAS,QACTV,MAAM,oBAEP,CACCF,GAAG,EACHC,KAAK,YACLW,SAAS,MACTV,MAAM,kBAEP,CACCF,GAAG,EACHC,KAAK,aACLW,SAAS,OACTV,MAAM,oBC/BOW,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAEhC,OAEC,yBAAKZ,UAAY,OAChB,2BACCA,UAAY,uCACZa,KAAM,SACNC,YAAa,gBACbC,SAAYH,MC2BDI,G,wDA/Bd,aAAe,IAAD,8BACb,gBAODC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CACbR,YAAaO,EAAME,OAAOC,SAR3B,EAAKC,MAAQ,CACZlB,MAAMA,EACNO,YAAY,IAJA,E,qDAeL,IAAD,OACDY,EAAcC,KAAKF,MAAMlB,MAAMqB,QAAO,SAAArB,GAC3C,OAAOA,EAAMN,KAAK4B,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAGjE,OAEC,yBAAK1B,UAAY,OAChB,wBAAIA,UAAY,MAAhB,kBACA,kBAAC,EAAD,CAAYY,aAAcY,KAAKP,iBAC/B,kBAAC,EAAD,CAAUb,MAAQmB,S,GA1BJK,c,MCElBC,IAASC,OAER,kBAAC,EAAD,MAEEC,SAASC,eAAe,SNuHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.53815bd5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n\treturn (\r\n\r\n\t\t<div className=' tc bg-white dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${id}?bgset=bg2`} alt ='robot' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({robot}) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobot.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robot[i].id} \r\n\t\t\t\t\t\t\tname={robot[i].name} \r\n\t\t\t\t\t\t\temail={robot[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t); \r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\r\n\t\t)\r\n\t}\r\n\r\nexport default CardList;","export const robot = [\r\n\t\r\n\t{\r\n\t\tid:1,\r\n\t\tname:'Pinpin',\r\n\t\tusername:'pin',\r\n\t\temail:'pinpin@gmail.com'\r\n\t},\r\n\t{\r\n\t\tid:2,\r\n\t\tname:'Alex hellen',\r\n\t\tusername:'alex',\r\n\t\temail:'alex@gmail.com.'\r\n\t},\r\n\t{\r\n\t\tid:3,\r\n\t\tname:'Amy farrera',\r\n\t\tusername:'amy',\r\n\t\temail:'amy@gmail.com.'\r\n\t},\r\n\t{\r\n\t\tid:4,\r\n\t\tname:'Bob vender',\r\n\t\tusername:'bob',\r\n\t\temail:'bob@gmail.com.'\r\n\t},\r\n\t{\r\n\t\tid:5,\r\n\t\tname:'Ellen fowler',\r\n\t\tusername:'Ellen',\r\n\t\temail:'ellen@gmail.com.'\r\n\t},\r\n\t{\r\n\t\tid:6,\r\n\t\tname:'Jimmy helpart',\r\n\t\tusername:'Jimmy',\r\n\t\temail:'jimmy@gmail.com.'\r\n\t},\r\n\t{\r\n\t\tid:7,\r\n\t\tname:'Bob dilan',\r\n\t\tusername:'Bob',\r\n\t\temail:'Bob@gmail.com.'\r\n\t},\r\n\t{\r\n\t\tid:1,\r\n\t\tname:'Zach human',\r\n\t\tusername:'Zach',\r\n\t\temail:'zach@gmail.com.'\r\n\t}\r\n\r\n]","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'pa3 ba b--white-70 bg-lightest-blue '\r\n\t\t\t\ttype ='search' \r\n\t\t\t\tplaceholder ='search robots' \r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\nexport default Searchbox;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport {robot} from './robot';\r\nimport Searchbox from './Searchbox';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobot:robot,\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tsearchfield: event.target.value\r\n\t\t})\r\n\t\t// console.log(event.target.value);\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filteredRobot=this.state.robot.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn( \r\n\r\n\t\t\t<div className = 'tc '>\r\n\t\t\t\t<h1 className = 'f1'> Robo Friends </h1>\r\n\t\t\t\t<Searchbox  searchChange={this.onSearchChange}/>\r\n\t\t\t\t<CardList robot ={filteredRobot} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App; ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n\r\n\t<App />\r\n\r\n\t, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}